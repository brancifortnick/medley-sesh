{"ast":null,"code":"const GET_TRACKS = \"song/GET_TRACKS\";\nconst ADD_TRACK = \"song/ADD_TRACK\";\nconst GET_ONE_TRACK = \"song/GET_ONE_TRACK\";\nconst DELETE_TRACK = \"song/DELETE_TRACK\";\n\nconst getAllSongs = songs => ({\n  type: GET_TRACKS,\n  payload: songs\n});\n\nconst addOneSong = song => ({\n  type: ADD_TRACK,\n  payload: song\n});\n\nconst grabOneSong = song => ({\n  type: GET_ONE_TRACK,\n  payload: song\n});\n\nconst deleteATrack = song => ({\n  type: DELETE_TRACK,\n  payload: song\n});\n\nexport const getMusiciansTracks = id => async dispatch => {\n  const response = await fetch(`/api/musicians/${id}/songs`);\n\n  if (response.ok) {\n    const songData = await response.json();\n    dispatch(getAllSongs(songData.songs));\n  } else {\n    console.log(\"+++++++____first thunk in SONG STORE___+++++++\");\n  }\n};\nexport const createNewSong = (title, file_url, song_img, musician_id) => async dispatch => {\n  file_url = file_url.url;\n  const res = await fetch(\"/api/songs/new\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      title,\n      file_url,\n      song_img,\n      musician_id\n    })\n  });\n\n  if (res.ok) {\n    const newSong = await res.json();\n    console.log(newSong, \"newSong value from createNewSOng thunk in song.store\");\n    dispatch(addOneSong(newSong));\n    return newSong;\n  } else {\n    console.log(\"erroring out in musician thunk---> createNewSong---> STORE ***SONG**\");\n  }\n}; // export const getOneSingleSong = (id) => async (dispatch) => {\n//   const response = await fetch(`/api/musicians/songs/${id}`);\n//   if (response.ok) {\n//     const singleSong = await response.json();\n//     dispatch(grabOneSong(singleSong));\n//     return singleSong;\n//   } else {\n//     console.log(\"error coming from store => getting single song in SONGSTORE\");\n//   }\n// };\n\nexport const deleteTrack = id => async dispatch => {\n  const response = await fetch(`/api/songs/${id}`, {\n    method: \"DELETE\"\n  });\n\n  if (response.ok) {\n    dispatch(deleteATrack(id));\n  }\n};\nconst initialState = {};\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_TRACKS:\n      const getState = {};\n      action.payload.forEach(song => {\n        getState[song.id] = song;\n      });\n      return getState;\n\n    case ADD_TRACK:\n      const newNew = { ...state\n      };\n      newNew[action.payload.id] = action.payload;\n      return newNew;\n\n    case GET_ONE_TRACK:\n      return { ...action.payload\n      };\n\n    case DELETE_TRACK:\n      const currentState = { ...state\n      };\n      delete currentState[action.payload]; // maybe this should be action.payload.id-not sure\n\n      return currentState;\n\n    default:\n      return state;\n  }\n} //   case UPDATE_TRACK: {}          //! update track reducer not added yet","map":{"version":3,"sources":["/home/nb/medley/medley-sesh/react-app/src/store/song.js"],"names":["GET_TRACKS","ADD_TRACK","GET_ONE_TRACK","DELETE_TRACK","getAllSongs","songs","type","payload","addOneSong","song","grabOneSong","deleteATrack","getMusiciansTracks","id","dispatch","response","fetch","ok","songData","json","console","log","createNewSong","title","file_url","song_img","musician_id","url","res","method","headers","body","JSON","stringify","newSong","deleteTrack","initialState","reducer","state","action","getState","forEach","newNew","currentState"],"mappings":"AAAA,MAAMA,UAAU,GAAG,iBAAnB;AACA,MAAMC,SAAS,GAAG,gBAAlB;AACA,MAAMC,aAAa,GAAG,oBAAtB;AACA,MAAMC,YAAY,GAAG,mBAArB;;AAEA,MAAMC,WAAW,GAAIC,KAAD,KAAY;AAC9BC,EAAAA,IAAI,EAAEN,UADwB;AAE9BO,EAAAA,OAAO,EAAEF;AAFqB,CAAZ,CAApB;;AAKA,MAAMG,UAAU,GAAIC,IAAD,KAAW;AAC5BH,EAAAA,IAAI,EAAEL,SADsB;AAE5BM,EAAAA,OAAO,EAAEE;AAFmB,CAAX,CAAnB;;AAKA,MAAMC,WAAW,GAAID,IAAD,KAAW;AAC7BH,EAAAA,IAAI,EAAEJ,aADuB;AAE7BK,EAAAA,OAAO,EAAEE;AAFoB,CAAX,CAApB;;AAKA,MAAME,YAAY,GAAIF,IAAD,KAAW;AAC9BH,EAAAA,IAAI,EAAEH,YADwB;AAE9BI,EAAAA,OAAO,EAAEE;AAFqB,CAAX,CAArB;;AAKA,OAAO,MAAMG,kBAAkB,GAAIC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AAC5D,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,kBAAiBH,EAAG,QAAtB,CAA5B;;AACA,MAAIE,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAvB;AACAL,IAAAA,QAAQ,CAACV,WAAW,CAACc,QAAQ,CAACb,KAAV,CAAZ,CAAR;AACD,GAHD,MAGO;AACLe,IAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACD;AACF,CARM;AAUP,OAAO,MAAMC,aAAa,GACxB,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,EAA4BC,WAA5B,KAA4C,MAAOZ,QAAP,IAAoB;AAC9DU,EAAAA,QAAQ,GAAGA,QAAQ,CAACG,GAApB;AACA,QAAMC,GAAG,GAAG,MAAMZ,KAAK,CAAC,gBAAD,EAAmB;AACxCa,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF+B;AAKxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEV,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,QAAnB;AAA6BC,MAAAA;AAA7B,KAAf;AALkC,GAAnB,CAAvB;;AAOA,MAAIE,GAAG,CAACX,EAAR,EAAY;AACV,UAAMiB,OAAO,GAAG,MAAMN,GAAG,CAACT,IAAJ,EAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CACEa,OADF,EAEE,sDAFF;AAIApB,IAAAA,QAAQ,CAACN,UAAU,CAAC0B,OAAD,CAAX,CAAR;AACA,WAAOA,OAAP;AACD,GARD,MAQO;AACLd,IAAAA,OAAO,CAACC,GAAR,CACE,sEADF;AAGD;AACF,CAvBI,C,CAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMc,WAAW,GAAItB,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AACrD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAaH,EAAG,EAAlB,EAAqB;AAC/CgB,IAAAA,MAAM,EAAE;AADuC,GAArB,CAA5B;;AAGA,MAAId,QAAQ,CAACE,EAAb,EAAiB;AACfH,IAAAA,QAAQ,CAACH,YAAY,CAACE,EAAD,CAAb,CAAR;AACD;AACF,CAPM;AASP,MAAMuB,YAAY,GAAG,EAArB;AAEA,eAAe,SAASC,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBF,YAAsB;AAAA,MAARG,MAAQ;;AAC5D,UAAQA,MAAM,CAACjC,IAAf;AACE,SAAKN,UAAL;AACE,YAAMwC,QAAQ,GAAG,EAAjB;AACAD,MAAAA,MAAM,CAAChC,OAAP,CAAekC,OAAf,CAAwBhC,IAAD,IAAU;AAC/B+B,QAAAA,QAAQ,CAAC/B,IAAI,CAACI,EAAN,CAAR,GAAoBJ,IAApB;AACD,OAFD;AAGA,aAAO+B,QAAP;;AACF,SAAKvC,SAAL;AACE,YAAMyC,MAAM,GAAG,EAAE,GAAGJ;AAAL,OAAf;AACAI,MAAAA,MAAM,CAACH,MAAM,CAAChC,OAAP,CAAeM,EAAhB,CAAN,GAA4B0B,MAAM,CAAChC,OAAnC;AACA,aAAOmC,MAAP;;AACF,SAAKxC,aAAL;AACE,aAAO,EAAE,GAAGqC,MAAM,CAAChC;AAAZ,OAAP;;AACF,SAAKJ,YAAL;AACE,YAAMwC,YAAY,GAAG,EAAE,GAAGL;AAAL,OAArB;AACA,aAAOK,YAAY,CAACJ,MAAM,CAAChC,OAAR,CAAnB,CAFF,CAEuC;;AACrC,aAAOoC,YAAP;;AACF;AACE,aAAOL,KAAP;AAlBJ;AAoBD,C,CACD","sourcesContent":["const GET_TRACKS = \"song/GET_TRACKS\";\nconst ADD_TRACK = \"song/ADD_TRACK\";\nconst GET_ONE_TRACK = \"song/GET_ONE_TRACK\";\nconst DELETE_TRACK = \"song/DELETE_TRACK\";\n\nconst getAllSongs = (songs) => ({\n  type: GET_TRACKS,\n  payload: songs,\n});\n\nconst addOneSong = (song) => ({\n  type: ADD_TRACK,\n  payload: song,\n});\n\nconst grabOneSong = (song) => ({\n  type: GET_ONE_TRACK,\n  payload: song,\n});\n\nconst deleteATrack = (song) => ({\n  type: DELETE_TRACK,\n  payload: song,\n});\n\nexport const getMusiciansTracks = (id) => async (dispatch) => {\n  const response = await fetch(`/api/musicians/${id}/songs`);\n  if (response.ok) {\n    const songData = await response.json();\n    dispatch(getAllSongs(songData.songs));\n  } else {\n    console.log(\"+++++++____first thunk in SONG STORE___+++++++\");\n  }\n};\n\nexport const createNewSong =\n  (title, file_url, song_img, musician_id) => async (dispatch) => {\n    file_url = file_url.url;\n    const res = await fetch(\"/api/songs/new\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ title, file_url, song_img, musician_id }),\n    });\n    if (res.ok) {\n      const newSong = await res.json();\n      console.log(\n        newSong,\n        \"newSong value from createNewSOng thunk in song.store\"\n      );\n      dispatch(addOneSong(newSong));\n      return newSong;\n    } else {\n      console.log(\n        \"erroring out in musician thunk---> createNewSong---> STORE ***SONG**\"\n      );\n    }\n  };\n\n// export const getOneSingleSong = (id) => async (dispatch) => {\n//   const response = await fetch(`/api/musicians/songs/${id}`);\n//   if (response.ok) {\n//     const singleSong = await response.json();\n//     dispatch(grabOneSong(singleSong));\n//     return singleSong;\n//   } else {\n//     console.log(\"error coming from store => getting single song in SONGSTORE\");\n//   }\n// };\n\nexport const deleteTrack = (id) => async (dispatch) => {\n  const response = await fetch(`/api/songs/${id}`, {\n    method: \"DELETE\",\n  });\n  if (response.ok) {\n    dispatch(deleteATrack(id));\n  }\n};\n\nconst initialState = {};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_TRACKS:\n      const getState = {};\n      action.payload.forEach((song) => {\n        getState[song.id] = song;\n      });\n      return getState;\n    case ADD_TRACK:\n      const newNew = { ...state };\n      newNew[action.payload.id] = action.payload;\n      return newNew;\n    case GET_ONE_TRACK:\n      return { ...action.payload };\n    case DELETE_TRACK:\n      const currentState = { ...state };\n      delete currentState[action.payload]; // maybe this should be action.payload.id-not sure\n      return currentState;\n    default:\n      return state;\n  }\n}\n//   case UPDATE_TRACK: {}          //! update track reducer not added yet\n"]},"metadata":{},"sourceType":"module"}