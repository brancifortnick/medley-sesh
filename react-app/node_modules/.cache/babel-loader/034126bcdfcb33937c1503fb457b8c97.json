{"ast":null,"code":"const GET_MUSICIANS = \"musician/GET_MUSICIANS\";\nconst GET_ONE = \"musician/GET_ONE\";\nconst ADD_MUSICIAN = \"musician/ADD_MUSICIAN\";\nconst DELETE_MUSICIAN = \"musician/DELETE_MUSICIAN\";\nconst UPDATE_BIOGRAPHY = \"musician/UPDATE_BIOGRAPHY\"; // const ADD_IMAGE = \"musician/ADD_IMAGE\"; -- put route for image updating\n\nconst getAllArtists = musicians => ({\n  type: GET_MUSICIANS,\n  payload: musicians\n});\n\nconst getOne = musician => ({\n  type: GET_ONE,\n  payload: musician\n});\n\nconst addMusician = musician => ({\n  type: ADD_MUSICIAN,\n  payload: musician\n});\n\nconst deleteMusician = musician => ({\n  type: DELETE_MUSICIAN,\n  payload: musician\n});\n\nconst updateBio = musician => ({\n  type: UPDATE_BIOGRAPHY,\n  payload: musician\n}); // const addImage = (musician) => ({\n//   type: ADD_IMAGE,\n//   payload: musician,\n// });\n//---put route\n\n\nexport const getAllMusicians = id => async dispatch => {\n  const res = await fetch(`/api/musicians/`);\n\n  if (res.ok) {\n    const data = await res.json();\n    dispatch(getAllArtists(data.musicians)); // return data;\n  }\n};\nexport const postNewMusician = (profile_img, biography, user_id, musician_name) => async dispatch => {\n  profile_img = profile_img.url;\n  const res = await fetch(\"/api/musicians/new\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      profile_img,\n      biography,\n      user_id,\n      musician_name\n    })\n  });\n\n  if (res.ok) {\n    const musician = await res.json();\n    dispatch(addMusician(musician));\n  } else {\n    console.log(\"Musician Not Added - Error\");\n  }\n};\nexport const getOneMusician = id => async dispatch => {\n  const res = await fetch(`/api/musicians/${id}`);\n\n  if (res.ok) {\n    const data = await res.json();\n    dispatch(getOne(data));\n  } //\n\n};\nexport const deleteOneMusician = id => async dispatch => {\n  const res = await fetch(`/api/musicians/${id}`, {\n    method: \"DELETE\"\n  });\n\n  if (res.ok) {\n    dispatch(deleteMusician(id));\n  } else {\n    console.log(\"Musician Can't be deleted\");\n  }\n};\nexport const updateBiography = (formData, musicianId) => async dispatch => {\n  const response = await fetch(`/api/musicians/${musicianId}/biography`, {\n    method: \"PUT\",\n    body: formData\n  });\n\n  if (response.ok) {\n    const biography = await response.json();\n    dispatch(updateBio(biography));\n  }\n}; // export const uploadImageToS = (profile_img, musicianId) => async (dispatch) => {\n//   // profile_img = profile_img.url\n//   const response = await fetch(`/api/musicians/${musicianId}/image`, {\n//     method: \"PUT\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({ profile_img, musicianId }),\n//   });\n//   if (response.ok) {\n//     const picture = await response.json();\n//     dispatch(addImage(picture));\n//   } else {\n//     console.log(\"Image can't be added\");\n//   }\n// };\n//---put route semi functioning\n\nconst initialState = {};\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_MUSICIANS:\n      let newState = {};\n      action.payload.forEach(musician => {\n        newState[musician.id] = musician;\n      });\n      return newState;\n\n    case ADD_MUSICIAN:\n      const addState = { ...state\n      };\n      addState[action.payload.id] = action.payload;\n      return addState;\n    // return { ...action.payload };\n\n    case GET_ONE:\n      return { ...action.payload\n      };\n\n    case DELETE_MUSICIAN:\n      const currentState = { ...state\n      };\n      delete currentState[action.payload.id];\n      return currentState;\n\n    case UPDATE_BIOGRAPHY:\n      return { ...action.payload\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/nb/medley/medley-sesh/react-app/src/store/musician.js"],"names":["GET_MUSICIANS","GET_ONE","ADD_MUSICIAN","DELETE_MUSICIAN","UPDATE_BIOGRAPHY","getAllArtists","musicians","type","payload","getOne","musician","addMusician","deleteMusician","updateBio","getAllMusicians","id","dispatch","res","fetch","ok","data","json","postNewMusician","profile_img","biography","user_id","musician_name","url","method","headers","body","JSON","stringify","console","log","getOneMusician","deleteOneMusician","updateBiography","formData","musicianId","response","initialState","reducer","state","action","newState","forEach","addState","currentState"],"mappings":"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","sourcesContent":["const GET_MUSICIANS = \"musician/GET_MUSICIANS\";\r\nconst GET_ONE = \"musician/GET_ONE\";\r\nconst ADD_MUSICIAN = \"musician/ADD_MUSICIAN\";\r\nconst DELETE_MUSICIAN = \"musician/DELETE_MUSICIAN\";\r\nconst UPDATE_BIOGRAPHY = \"musician/UPDATE_BIOGRAPHY\";\r\n// const ADD_IMAGE = \"musician/ADD_IMAGE\"; -- put route for image updating\r\n\r\nconst getAllArtists = (musicians) => ({\r\n  type: GET_MUSICIANS,\r\n  payload: musicians,\r\n});\r\n\r\nconst getOne = (musician) => ({\r\n  type: GET_ONE,\r\n  payload: musician,\r\n});\r\n\r\nconst addMusician = (musician) => ({\r\n  type: ADD_MUSICIAN,\r\n  payload: musician,\r\n});\r\n\r\nconst deleteMusician = (musician) => ({\r\n  type: DELETE_MUSICIAN,\r\n  payload: musician,\r\n});\r\n\r\nconst updateBio = (musician) => ({\r\n  type: UPDATE_BIOGRAPHY,\r\n  payload: musician,\r\n});\r\n\r\n// const addImage = (musician) => ({\r\n//   type: ADD_IMAGE,\r\n//   payload: musician,\r\n// });\r\n//---put route\r\n\r\nexport const getAllMusicians = (id) => async (dispatch) => {\r\n  const res = await fetch(`/api/musicians/`);\r\n  if (res.ok) {\r\n    const data = await res.json();\r\n    dispatch(getAllArtists(data.musicians));\r\n    // return data;\r\n  }\r\n};\r\n\r\nexport const postNewMusician =\r\n  (profile_img, biography, user_id, musician_name) => async (dispatch) => {\r\n    profile_img = profile_img.url;\r\n    const res = await fetch(\"/api/musicians/new\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ profile_img, biography, user_id, musician_name }),\r\n    });\r\n    if (res.ok) {\r\n      const musician = await res.json();\r\n      dispatch(addMusician(musician));\r\n    } else {\r\n      console.log(\"Musician Not Added - Error\");\r\n    }\r\n  };\r\n\r\nexport const getOneMusician = (id) => async (dispatch) => {\r\n  const res = await fetch(`/api/musicians/${id}`);\r\n  if (res.ok) {\r\n    const data = await res.json();\r\n    dispatch(getOne(data));\r\n  } //\r\n};\r\n\r\nexport const deleteOneMusician = (id) => async (dispatch) => {\r\n  const res = await fetch(`/api/musicians/${id}`, {\r\n    method: \"DELETE\",\r\n  });\r\n  if (res.ok) {\r\n    dispatch(deleteMusician(id));\r\n  } else {\r\n    console.log(\"Musician Can't be deleted\");\r\n  }\r\n};\r\n\r\nexport const updateBiography = (formData, musicianId) => async (dispatch) => {\r\n  const response = await fetch(`/api/musicians/${musicianId}/biography`, {\r\n    method: \"PUT\",\r\n    body: formData,\r\n  });\r\n  if (response.ok) {\r\n    const biography = await response.json();\r\n    dispatch(updateBio(biography));\r\n  }\r\n};\r\n\r\n// export const uploadImageToS = (profile_img, musicianId) => async (dispatch) => {\r\n//   // profile_img = profile_img.url\r\n//   const response = await fetch(`/api/musicians/${musicianId}/image`, {\r\n//     method: \"PUT\",\r\n//     headers: {\r\n//       \"Content-Type\": \"application/json\",\r\n//     },\r\n//     body: JSON.stringify({ profile_img, musicianId }),\r\n//   });\r\n//   if (response.ok) {\r\n//     const picture = await response.json();\r\n//     dispatch(addImage(picture));\r\n//   } else {\r\n//     console.log(\"Image can't be added\");\r\n//   }\r\n// };\r\n//---put route semi functioning\r\n\r\nconst initialState = {};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_MUSICIANS:\r\n      let newState = {};\r\n      action.payload.forEach((musician) => {\r\n        newState[musician.id] = musician;\r\n      });\r\n      return newState;\r\n    case ADD_MUSICIAN:\r\n      const addState = { ...state };\r\n      addState[action.payload.id] = action.payload;\r\n      return addState;\r\n    // return { ...action.payload };\r\n    case GET_ONE:\r\n      return { ...action.payload };\r\n    case DELETE_MUSICIAN:\r\n      const currentState = { ...state };\r\n      delete currentState[action.payload.id];\r\n      return currentState;\r\n    case UPDATE_BIOGRAPHY:\r\n      return { ...action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}